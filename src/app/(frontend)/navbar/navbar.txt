'use client'
import './Navbar.css'
import { useState, useEffect } from 'react'
import { Menu, X, ChevronDown } from 'lucide-react'

const Navbar = () => {
  const [isMenuOpen, setIsMenuOpen] = useState(false)
  const [isDropdownOpen, setIsDropdownOpen] = useState(false)

  const navItems = [
    { name: 'About Us', href: '/about' },
    { name: 'Product', href: '/product' },
    { name: 'Features', href: '/features' },
    { name: 'Templates', href: '/templates' },
    { name: 'Resources', href: '/resources', hasDropdown: true },
    { name: 'Pricing', href: '/pricing' },
  ]

  const resourceDropdownItems = [
    { name: 'FAQs', href: '#' },
    { name: 'REST API Reference', href: '/about' },
    { name: 'Certificate Generation', type: 'header' },
    { name: 'Tutorial: Airtable Integration', href: '#' },
    { name: 'Tutorial: Zapier Integration', href: '#' },
    { name: 'Tutorial: Integromat Integration', href: '#' },
    { name: 'PDF Generation', type: 'header' },
    { name: 'Learn The Template Language In 10 Minutes', href: '#' },
    { name: 'Zapier Integration - Automate PDF Generation And Send As Attachment', href: '#' },
    { name: 'MJML Code', type: 'header' },
    { name: 'APITemplate.io C# Library', href: '#' },
    { name: 'APITemplate.io Python 3 Library', href: '#' },
    { name: 'APITemplate.io PHP Library', href: '#' },
    { name: 'APITemplate.io Java Library', href: '#' },
    { name: 'APITemplate.io Javascript Library', href: '#' },
    { name: 'APITemplate.io UIPath Library', href: '#' },
  ]

  useEffect(() => {
    if (isMenuOpen) {
      document.body.style.overflow = 'hidden'
    } else {
      document.body.style.overflow = ''
    }

    return () => {
      document.body.style.overflow = ''
    }
  }, [isMenuOpen])

  return (
    <div className="relative flex justify-between lg:justify-around items-center py-5 md:py-8 lg:py-12 px-5 md:px-8">
      {/* Logo */}
      <a href="https://outliny.com/" className="flex items-center flex-shrink-0 cursor-pointer">
        <img src="/Logo.svg" className="w-[100px] md:w-[120px] lg:w-[140px]" alt="Outliny Logo" />
      </a>

      {/* Desktop Navbar */}
      <div className="hidden lg:block">
        <ul className="flex px-6 py-2 bg-custom-gradient1 rounded-lg gradient-border">
          {navItems.map((item, index) => (
            <li key={index} className="relative">
              {item.hasDropdown ? (
                <div className="relative">
                  <button
                    className="flex items-center px-3 xl:px-4 text-white cursor-pointer"
                    onClick={(e) => {
                      e.preventDefault()
                      setIsDropdownOpen(!isDropdownOpen)
                    }}
                  >
                    {item.name}{' '}
                    <ChevronDown
                      size={16}
                      className={`ml-2 transition-transform ${isDropdownOpen ? 'rotate-180' : ''}`}
                    />
                  </button>
                  {isDropdownOpen && (
                    <ul className="absolute left-0 mt-2 bg-[#101a22] text-white shadow-lg rounded-lg z-50 py-3 px-4 w-[314px] h-[744px] rounded-tr-[22.11px] rounded-bl-[22.11px] rounded-br-[22.11px] border">
                      {resourceDropdownItems.map((subItem, subIndex) =>
                        subItem.type === 'header' ? (
                          <li
                            key={subIndex}
                            className="mt-2 ml-3 font-poppins font-extrabold text-[16px] capitalize"
                          >
                            {subItem.name}
                          </li>
                        ) : (
                          <li
                            key={subIndex}
                            className="px-4 py-2 hover:bg-gray-800 cursor-pointer rounded-md"
                          >
                            <a href={subItem.href} className="block w-full">
                              {subItem.name}
                            </a>
                          </li>
                        ),
                      )}
                    </ul>
                  )}
                </div>
              ) : (
                <a href={item.href} className="block px-3 xl:px-4 text-white cursor-pointer">
                  {item.name}
                </a>
              )}
            </li>
          ))}
        </ul>
      </div>

      {/* Mobile Menu & Overlay */}
      {isMenuOpen && (
        <div className="fixed inset-0 bg-[#111113] z-40 lg:hidden">
          {/* Header with Logo and Close Button */}
          <div className="flex justify-between items-center p-5 border-b border-gray-800">
            <a href="https://outliny.com/" className="flex items-center">
              <img src="/Logo.svg" className="w-[100px]" alt="Outliny Logo" />
            </a>
            <button
              onClick={() => setIsMenuOpen(false)}
              className="text-white focus:outline-none"
              aria-label="Close menu"
            >
              <X size={24} />
            </button>
          </div>

          {/* Scrollable Content */}
          <div className="h-[calc(100vh-80px)] overflow-y-auto">
            <ul className="flex flex-col space-y-4 p-6">
              {navItems.map((item, index) => (
                <li key={index} className="relative">
                  {item.hasDropdown ? (
                    <div className="relative">
                      <button
                        className="flex items-center w-full text-white text-xl font-light justify-between"
                        onClick={() => setIsDropdownOpen(!isDropdownOpen)}
                      >
                        {item.name}
                        <ChevronDown
                          size={16}
                          className={`transition-transform ${isDropdownOpen ? 'rotate-180' : ''}`}
                        />
                      </button>
                      {isDropdownOpen && (
                        <ul className="mt-4 space-y-2 border-l border-gray-700 pl-4">
                          {resourceDropdownItems.map((subItem, subIndex) =>
                            subItem.type === 'header' ? (
                              <li
                                key={subIndex}
                                className="text-gray-400 font-bold mt-6 first:mt-2"
                              >
                                {subItem.name}
                              </li>
                            ) : (
                              <li key={subIndex}>
                                <a
                                  href={subItem.href}
                                  className="block py-2 text-white hover:text-gray-400 transition-colors"
                                  onClick={() => setIsMenuOpen(false)}
                                >
                                  {subItem.name}
                                </a>
                              </li>
                            ),
                          )}
                        </ul>
                      )}
                    </div>
                  ) : (
                    <a
                      href={item.href}
                      className="block text-white text-xl font-light hover:text-gray-400 transition-colors"
                      onClick={() => setIsMenuOpen(false)}
                    >
                      {item.name}
                    </a>
                  )}
                </li>
              ))}
            </ul>

            {/* Login Button */}
            <div className="px-6 mt-6">
              <button className="w-full py-3 text-white border border-[#3c3f47] rounded-lg font-light hover:bg-[#3c3f47] transition-colors">
                Login
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Regular Navbar Content */}

      <div className="example-2  rounded-btn ">
        <div className="inner ">
          <button className=" hidden lg:block border border-[#3c3f47] rounded-lg font-light">Login</button>
        </div>
      </div>
     
        {/* Hamburger Button */}
        <button
          onClick={() => setIsMenuOpen(!isMenuOpen)}
          className="lg:hidden text-white focus:outline-none z-30 ml-5"
          aria-label={isMenuOpen ? 'Close menu' : 'Open menu'}
        >
          {isMenuOpen ? <X size={24} /> : <Menu size={24} />}
        </button>
      </div>
    
  )
}

export default Navbar



------------------


'use client'
import './Navbar.css'
import { useState } from 'react'
import { Menu, X } from 'lucide-react'

const Navbar = () => {
  const [isMenuOpen, setIsMenuOpen] = useState(false)

  const navItems = [
    { name: 'About Us', href: '/about' },
    { name: 'Product', href: '/product' },
    { name: 'features', href: '/features' },
    { name: 'Templates', href: '/templates' },
    { name: 'Resources', href: '/resources' },
    { name: 'Pricing', href: '/pricing' },
  ]

  return (
    <div className="fixed top-0 left-0 right-0 bg-[#08090a] z-50 ">
      <div className="flex justify-between lg:justify-around items-center py-5 md:py-8 lg:py-10 px-5 md:px-8 ">
        {/* Logo */}
        <a href="http://localhost:3000/main" className="flex items-center flex-shrink-0">
          <img src="/Logo.svg" className="w-[100px] md:w-[120px] lg:w-[155px]" alt="Outliny Logo" />
        </a>

        {/* Desktop Navigation */}
        <div className="hidden lg:block">
          <ul className="flex px-6 py-2 bg-custom-gradient1 rounded-lg gradient-border">
            {navItems.map((item, index) => (
              <li key={index} className="relative group">
                <a
                  href={item.href}
                  className="block px-3 xl:px-4 text-white hover:text-gray-400 relative after:content-[''] after:block after:h-[2px] after:w-full after:bg-white after:scale-x-0 group-hover:after:scale-x-100 after:transition-transform after:duration-300 font-extralight text-[14px] xl:text-[16px] capitalize whitespace-nowrap"
                >
                  {item.name}
                </a>
              </li>
            ))}
          </ul>
        </div>

        <div className="flex items-center gap-4">
          {/* Login button - Desktop */}
          <div className="hidden lg:block example-2 rounded-btn">
            <div className="inner">
              <button className="border border-[#3c3f47] rounded-lg font-light">Login</button>
            </div>
          </div>

          {/* Hamburger (Mobile only) */}
          <button
            onClick={() => setIsMenuOpen(!isMenuOpen)}
            className="lg:hidden text-white focus:outline-none"
            aria-label={isMenuOpen ? 'Close menu' : 'Open menu'}
          >
            {isMenuOpen ? <X size={24} /> : <Menu size={24} />}
          </button>
        </div>
      </div>

      {/* Mobile Menu */}
      {isMenuOpen && (
        <div className="fixed inset-0 top-0 bg-[#08090a] z-50 lg:hidden">
          {/* Mobile Header */}
          <div className="flex justify-between items-center p-5">
            <a href="https://outliny.com/" className="flex items-center">
              <img src="/Logo.svg" className="w-[100px]" alt="Outliny Logo" />
            </a>
            <button onClick={() => setIsMenuOpen(false)} className="text-white focus:outline-none">
              <X size={24} />
            </button>
          </div>

          {/* Mobile Menu Content */}
          <div className="flex flex-col justify-center items-center ">
            <div className=" overflow-y-auto py-8">
              <ul className=" space-y-4 ">
                {navItems.map((item, index) => (
                  <li key={index} className="w-full">
                    <a
                      href={item.href}
                      onClick={() => setIsMenuOpen(false)}
                      className="block py-3 text-white text-xl font-light hover:text-gray-400 transition-colors"
                    >
                      {item.name}
                    </a>
                  </li>
                ))}
              </ul>
            </div>

            {/* Login Button - Mobile */}
            <div className="max-w-[500px] mx-auto ">
              <button className=" px-20 py-3 mb-5 text-white border border-[#3c3f47] rounded-lg font-light hover:bg-[#3c3f47] transition-colors">
                Login
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

export default Navbar


----
navbar.css





.card { 
    /* max-width: 500px; */
    width: 100%;
    
    margin: 100px auto;
    border-radius: 10px;
  }
  
  .card .inner {
    padding: 5px;

    border: 1px solid #3f3a3a;
    border-radius: 10px;
  background-color: #181c25;

    border-radius: 10px;
    
  }
  


  .example-2 {
    position: relative;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  
  .example-2 .inner {
    position: relative;
    z-index: 1;
    width: 140px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 2px;
  }



  @keyframes rotate {
    from {
      transform: rotate(0);
    }
  
    to {
      transform: rotate(360deg);
    }
  }
  
 
  
  .example-2::before {
    content: "";
    position: absolute;
    background: linear-gradient(90deg, rgba(255, 255, 255, 0) 0%, rgb(238, 236, 236) 50%, rgba(255, 255, 255, 0) 100%);
    height: 200px;
    width: 75px;
    animation: rotate 3s linear forwards infinite;
    z-index: 0;
    top: 50%;
    transform-origin: top center;
  }
  

  

  
  @keyframes glow {
    0% {
      background-position: 0 0;
    }
  
    50% {
      background-position: 100% 0;
    }
  
    100% {
      background-position: 0 0;
    }
  }
  

  
  @keyframes animateOutline {
    0% {
      outline-width: 1px;
      outline-offset: 0;
      outline-color: rgba(0, 130, 206, 0);
    }
  
    10% {
      outline-color: rgba(0, 130, 206, 0.75  );
    }
  
    /* The animation finishes at 50% */
    50% {
      outline-width: 7px;
      outline-offset: 4px;
      outline-color: rgba(0, 130, 206, 0);
    }
  
    100% {
      outline-width: 7px;
      outline-offset: 4px;
      outline-color: rgba(102, 102, 102, 0);
    }
  }

  .example-2 .inner button {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 8px;
    text-align: center;
    background-color: #181c25;
    color: white;
  }

.gradient-border {
  position: relative;
}

.gradient-border::before {
  content: '';
  position: absolute;
  inset: 0;
  border-radius: 0.5rem;
  padding: 0.8px;
  background: linear-gradient(180deg, rgba(150, 150, 150, 0.8) 0%, rgba(255, 255, 255, 0.15) 80%);
  -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#c50000 0 0);
  mask-composite: exclude;
  pointer-events: none;
}
@keyframes border-rotate {
  from {
    transform: translateX(-50%);
  }
  to {
    transform: translateX(0);
  }
}

/* Mobile Menu Animation */
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes slideIn {
  from { transform: translateX(100%); border-radius: 30px 0 0 30px; }
  to { transform: translateX(0); border-radius: 0; }
}



.hamburger-btn:hover { transform: scale(1.1); }

/* Mobile menu animations */
.mobile-menu-enter { animation: slideIn 0.5s ease-out forwards, fadeIn 0.5s ease forwards; }
.mobile-menu-exit { animation: slideIn 0.5s ease-out reverse forwards; }
.rounded-menu { overflow: hidden; }

/* Prevent body scrolling when menu is open */
.no-scroll { overflow: hidden; position: fixed; width: 100%; height: 100%; }

.rounded-btn { border-radius: 8px; }

/* Responsive adjustments */
@media (max-width: 768px) {
  .example-2 .inner { width: 130px; height: 36px; }
  .example-2 .inner button { font-size: 14px; }
}

@media (max-width: 480px) {
  .example-2 .inner { width: 120px; height: 34px; }
}





--------------------
navbar desing another 


'use client'
import './Navbar.css'
import { useState } from 'react'
import { Menu, X } from 'lucide-react'
import Link from 'next/link'

const Navbar = () => {
  const [isMenuOpen, setIsMenuOpen] = useState(false)

  const navItems = [
    { name: 'About Us', href: '/about' },
    { name: 'Product', href: '/product' },
    { name: 'features', href: '/features' },
    { name: 'Templates', href: '/templates' },
    { name: 'Resources', href: '/resources' },
    { name: 'Pricing', href: '/pricing' },
  ]

  return (
    <nav className="fixed w-full bg-[#08090a] text-white z-50 border-b border-[#232323]">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex items-center justify-between h-20">
          {/* Logo */}
          <div className="flex-shrink-0">
            <Link href="/" className="flex items-center">
              <img src="/Logo.png" alt="Profound" className="h-10" />
            </Link>
          </div>
          {/* {!isMenuOpen && <Link
              href="/get-started"
              className="bg-white sm:hidden text-black px-4 py-2 rounded-md text-sm font-medium hover:bg-[#505050] transition-all duration-200"
            >
              Get started
            </Link>} */}
          {/* another way */}
          <Link
            href="/get-started"
            className={`bg-white text-black px-4 py-2 rounded-md text-sm font-medium transition-all duration-200 sm:hidden
    ${isMenuOpen ? 'hidden' : 'block'}
  `}
          >
            Get started
          </Link>
          {/* Desktop Navigation */}
          <div className="hidden md:flex items-center space-x-8 font-poppins ">
            {navItems.map((item) => (
              <Link
                key={item.name}
                href={item.href}
                className="text-white hover:text-[#777777] text-[16px]  font-light font-poppins "
              >
                {item.name}
              </Link>
            ))}
          </div>
          {/* Auth Buttons */}
          <div className="hidden md:flex items-center space-x-4">
            <Link href="/login" className="text-gray-300 hover:text-white text-sm font-medium">
              Log in
            </Link>
            <Link
              href="/get-started"
              className="bg-white text-black px-4 py-2 rounded-md text-sm font-medium hover:bg-[#505050] transition-all duration-200"
            >
              Get started
            </Link>
          </div>
          {/* Mobile menu button */}
          <div className="md:hidden">
            <button
              onClick={() => setIsMenuOpen(!isMenuOpen)}
              className="text-gray-300 hover:text-white p-2"
            >
              {isMenuOpen ? <X size={24} /> : <Menu size={24} />}
            </button>
          </div>
        </div>

        {/* Mobile Navigation */}
        {isMenuOpen && (
          <div className="md:hidden">
            <div className="px-2 pt-2 pb-3 space-y-1">
              {navItems.map((item) => (
                <Link
                  key={item.name}
                  href={item.href}
                  className="block px-3 py-2 text-base font-medium text-gray-300 hover:text-white"
                  onClick={() => setIsMenuOpen(false)}
                >
                  {item.name}
                </Link>
              ))}
              <div className="mt-4 space-y-2">
                <Link
                  href="/login"
                  className="block px-3 py-2 text-lg font-medium text-gray-300 hover:text-white"
                  onClick={() => setIsMenuOpen(false)}
                >
                  Log in
                </Link>
                <Link
                  href="/get-started"
                  className="block px-3 py-2 text-lg font-medium bg-white text-black rounded-md"
                  onClick={() => setIsMenuOpen(false)}
                >
                  Get started
                </Link>
              </div>
            </div>
          </div>
        )}
      </div>
    </nav>
  )
}

export default Navbar
