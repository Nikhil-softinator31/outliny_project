'use client'

import { useRef, useEffect, memo, forwardRef, ReactNode } from 'react'
import Image from 'next/image'
import gsap from 'gsap'
import { ScrollTrigger } from 'gsap/ScrollTrigger'

gsap.registerPlugin(ScrollTrigger)

interface CardContainerProps {
  children: ReactNode
}

const CardContainer = memo(
  forwardRef<HTMLDivElement, CardContainerProps>(({ children }, ref) => (
    <div ref={ref} className="py-4 flex items-center justify-center opacity-0 mx-auto w-full">
      {children}
    </div>
  )),
)
CardContainer.displayName = 'CardContainer'

interface CardProps {
  data: {
    imageSrc: string
    description: string
  }
}

const Card = memo(({ data }: CardProps) => {
  const cardRef = useRef<HTMLDivElement | null>(null)
  const containerRef = useRef<HTMLDivElement | null>(null)

  useEffect(() => {
    const card = cardRef.current
    const container = containerRef.current
    if (!card || !container) return

    gsap.fromTo(
      container,
      { opacity: 0, y: 50 },
      {
        opacity: 1,
        y: 0,
        duration: 0.8,
        scrollTrigger: {
          trigger: container,
          start: 'top bottom-=100',
          end: 'bottom center',
          toggleActions: 'play none none reverse',
        },
      },
    )

    const handleMouseMove = (e: MouseEvent) => {
      const { width, height, left, top } = card.getBoundingClientRect()
      const x = e.clientX - left - width / 2
      const y = e.clientY - top - height / 2

      gsap.to(card, {
        rotationX: (-y / height) * 10,
        rotationY: (x / width) * 10,
        duration: 0.5,
        ease: 'power2.out',
      })
    }

    const handleMouseEnter = () => {
      gsap.to(card, { scale: 1.05, duration: 0.5, ease: 'elastic.out(1, 0.3)' })
    }

    const handleMouseLeave = () => {
      gsap.to(card, {
        rotationX: 0,
        rotationY: 0,
        scale: 1,
        duration: 0.6,
        ease: 'elastic.out(1, 0.3)',
      })
    }

    card.addEventListener('mousemove', handleMouseMove)
    card.addEventListener('mouseenter', handleMouseEnter)
    card.addEventListener('mouseleave', handleMouseLeave)

    return () => {
      card.removeEventListener('mousemove', handleMouseMove)
      card.removeEventListener('mouseenter', handleMouseEnter)
      card.removeEventListener('mouseleave', handleMouseLeave)
      ScrollTrigger.getAll().forEach((trigger) => trigger.kill())
    }
  }, [])

  return (
    <CardContainer ref={containerRef}>
      <div
        ref={cardRef}
        className="max-w-[260px] sm:max-w-[280px] md:max-w-[400px] lg:max-w-[320px] h-[250px] sm:h-[260px] md:h-[270px] lg:h-[280px] rounded-xl flex flex-col items-center text-center  bg-[#0a0a0a]
        overflow-hidden bg-[gray-100/5] backdrop-blur-md border border-white/20
        transition-transform duration-300 ease-in-out hover:border-white/50
        transform-gpu perspective-1000 group"
      >
        <div className="relative w-full aspect-square max-w-[120px] xs:max-w-[140px] sm:max-w-[160px] md:max-w-[180px] mx-auto overflow-hidden">
          <Image
            src={data.imageSrc}
            alt="Card Image"
            fill
            className="transition-all duration-500 grayscale group-hover:grayscale-0 object-cover rounded-md"
            sizes="(max-width: 640px) 120px, (max-width: 768px) 140px, (max-width: 1024px) 160px, 180px"
            priority
          />
        </div>
        <p className="text-gray-200 text-xs sm:text-sm md:text-base mt-4 px-2 sm:px-3 md:px-4 w-full text-center">
          {data.description}
        </p>
      </div>
    </CardContainer>
  )
})
Card.displayName = 'Card'

const cardData = [
  { id: 1, imageSrc: '/car13.jpg', description: 'Create invoice PDFs, packing slips, and more...' },
  { id: 2, imageSrc: '/car13.jpg', description: '1550+ free HTML email templates...' },
  { id: 3, imageSrc: '/car13.jpg', description: 'Professional invoices and documents...' },
  { id: 4, imageSrc: '/car13.jpg', description: 'Beautiful and responsive email templates...' },
  { id: 5, imageSrc: '/car13.jpg', description: 'Customizable document generation...' },
  { id: 6, imageSrc: '/car13.jpg', description: 'Automated workflow solutions...' },
  { id: 7, imageSrc: '/car13.jpg', description: 'Optimize document automation...' },
  { id: 8, imageSrc: '/car13.jpg', description: 'Enhanced productivity with automation...' },
]

export default function Dashboard() {
  return (
    <div className="min-h-screen bg-[#030303] text-white px-4 sm:px-6 md:px-8 lg:px-10 py-6 sm:py-8 md:py-10 ">
      <main className="rounded-2xl p-4 sm:p-8 md:p-12 lg:p-16">
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
          {cardData.map((card) => (
            <Card key={card.id} data={card} />
          ))}
        </div>
      </main>
    </div>
  )
}